#!/usr/bin/python

# Copyright (c) 2009-2013 Christoph Berg <myon@debian.org>
#
# getdpkginfo by
# Copyright (C) 2005  Jeroen van Wolffelaar <jeroen@wolffelaar.nl>
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import apt_pkg, psycopg2, os, re, sys, time

ftp_prefix = "/home/cbe/projects/postgresql/apt.postgresql.org"

pg = psycopg2.connect('dbname=pgweb')
cur = pg.cursor()
cur.execute("SET search_path TO apt")

def parseSourceFile(distribution, component, packagesfile):
    if not os.path.isfile(packagesfile):
        raise Exception("%s not found" % packagesfile)
    stdout = os.popen("bzcat '%s'" % packagesfile)
    #stdout = file(packagesfile)
    parse = apt_pkg.TagFile(stdout)

    # clear the suite
    cur.execute("BEGIN")
    cur.execute("""DELETE FROM sourcelist WHERE
                   (distribution, component) = (%s, %s)""",
                   [distribution, component])

    # for every package ...
    while parse.step():
        package = parse.section.get('Package')
        version = parse.section.get('Version')
        control = "\n".join([ "%s: %s" % (k, parse.section.get(k)) \
                for k in parse.section.keys() ])

        # store package control file
        cur.execute("""SELECT 1 FROM source
                       WHERE (source, srcversion) = (%s, %s)""",
                       [package, version])
        found = cur.fetchone()
        if not found: # this is the first time we see this package, extract more information
            cur.execute("""INSERT INTO source (source, srcversion, control, c)
                           VALUES (%s, %s, %s, control2hstore(%s))""",
                           [package, version, control, control])

        # finally, add the package to the suite's package list
        cur.execute("""INSERT INTO sourcelist
                       (distribution, component, source, srcversion)
                       VALUES (%s, %s, %s, %s)""",
                       [distribution, component, package, version])

    cur.execute("COMMIT")

def parseFile(distribution, component, architecture, packagesfile):
    if not os.path.isfile(packagesfile):
        raise Exception("%s not found" % packagesfile)
    stdout = os.popen("bzcat '%s'" % packagesfile)
    #stdout = file(packagesfile)
    parse = apt_pkg.TagFile(stdout)

    source_re = re.compile('(.*) \((.*)\)')
    binnmu_re = re.compile('\+b\d+$')

    # clear the suite
    cur.execute("BEGIN")
    cur.execute("""DELETE FROM packagelist WHERE
                   (distribution, component, architecture) = (%s, %s, %s)""",
                   [distribution, component, architecture])

    # for every package ...
    while parse.step():
        package = parse.section.get('Package')
        version = parse.section.get('Version')
        arch = parse.section.get('Architecture')
        control = "\n".join([ "%s: %s" % (k, parse.section.get(k)) \
                for k in parse.section.keys() ])

        # store package control file
        cur.execute("""SELECT 1 FROM package
                       WHERE (package, version, arch) = (%s, %s, %s)""",
                       [package, version, arch])
        found = cur.fetchone()
        if not found: # this is the first time we see this package, extract more information

            sourcefield = parse.section.get('Source')
            if sourcefield:
                match = source_re.match(sourcefield)
                if match:
                    source, source_version = match.group(1), match.group(2)
                else:
                    source, source_version = sourcefield, version
            else:
                source, source_version = package, version
            if binnmu_re.search(source_version):
                print "WARNING: %s %s %s: source %s %s for %s %s (%s) has binnmu version number, fixing" % \
                    (distribution, component, architecture, source, source_version,
                            package, version, arch)
                source_version = binnmu_re.sub('', source_version)

#            # find link to source package
#            cur.execute("""SELECT 1 FROM source
#                           WHERE (source, srcversion) = (%s, %s)""",
#                        [source, source_version])
#            found = cur.fetchone()
#            if not found:
#                print "WARNING: %s %s %s: source %s %s for %s %s (%s) not found" % \
#                    (distribution, component, architecture, source, source_version,
#                            package, version, arch)

            cur.execute("""INSERT INTO package (package, version, arch, control, c, source, srcversion)
                           VALUES (%s, %s, %s, %s, control2hstore(%s), %s, %s)""",
                           [package, version, arch, control, control, source, source_version])

        # finally, add the package to the suite's package list
        cur.execute("""INSERT INTO packagelist
                       (distribution, component, architecture, package, version, arch)
                       VALUES (%s, %s, %s, %s, %s, %s)""",
                       [distribution, component, architecture, package, version, arch])

    cur.execute("COMMIT")

verbose = sys.argv.__len__() > 1

cur.execute("""SELECT distribution, component,
                  extract (epoch from last_update) AS last_update
               FROM srcdistribution
               WHERE active
               FOR UPDATE NOWAIT""")
suites = cur.fetchall()

for distribution, component, last_update in suites:
    packagesfile = ftp_prefix + "/dists/%s/%s/source/Sources.bz2" % \
            (distribution, component)

    if not os.path.exists(packagesfile):
        print "WARNING:", packagesfile, "not found"
        continue

    mtime = os.path.getmtime(packagesfile)
    if not last_update or mtime > last_update:
        if verbose:
            print "Reading %s" % packagesfile
        parseSourceFile(distribution, component, packagesfile)

        update = """UPDATE srcdistribution SET last_update = %s WHERE
                    (distribution, component) = (%s, %s)"""
        cur.execute(update, [time.ctime(mtime), distribution, component])
        cur.execute("COMMIT")
    else:
        if verbose:
            print "Skipping up to date %s" % packagesfile

cur.execute("""SELECT distribution, component, architecture,
                  extract (epoch from last_update) AS last_update
               FROM distribution
               WHERE active
               ORDER BY CASE WHEN architecture = 'source' THEN 1 ELSE 2 END
               FOR UPDATE NOWAIT""")
suites = cur.fetchall()

for distribution, component, architecture, last_update in suites:
    packagesfile = ftp_prefix + "/dists/%s/%s/binary-%s/Packages.bz2" % \
            (distribution, component, architecture)

    if not os.path.exists(packagesfile):
        print "WARNING:", packagesfile, "not found"
        continue

    mtime = os.path.getmtime(packagesfile)
    if not last_update or mtime > last_update:
        if verbose:
            print "Reading %s" % packagesfile
        parseFile(distribution, component, architecture, packagesfile)

        update = """UPDATE distribution SET last_update = %s WHERE
                    (distribution, component, architecture) = (%s, %s, %s)"""
        cur.execute(update, [time.ctime(mtime), distribution, component, architecture])
        cur.execute("COMMIT")
    else:
        if verbose:
            print "Skipping up to date %s" % packagesfile

# Insert missing source packages:
# INSERT INTO package_source SELECT p.package_id, s.package_id as source_id from package p JOIN package s ON (p.package = s.package AND p.version = s.version AND s.pkg_architecture='source') where p.package_id not in (select package_id from package_source ) and p.pkg_architecture <> 'source';
# Insert missing source packages, packages with broken/missing binnmu Source: fieds:
# INSERT INTO package_source SELECT p.package_id, s.package_id as source_id from package p JOIN package s ON (p.package = s.package AND regexp_replace (p.version, E'\\+b\\d+$', '') = s.version AND s.pkg_architecture='source') where p.package_id not in (select package_id from package_source ) and p.pkg_architecture <> 'source';

