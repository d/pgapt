#!/bin/bash

# expected parameters:
#   distribution (without -pgdg, default "sid")
#   architecture (default "amd64")
#   stage (testing or production, default "testing")
# expected directories: chroots in /home/chroot
# needs dose3 >= 4

set -eu

error () {
  echo "Error: $@" >&2
  exit 2
}

fold () {
  local r
  for i in "$@"; do
    r="${r:+$r,}$i"
  done
  echo "${r:-}"
}

# read pgapt config
for dir in . .. /home/jenkins/jenkins/workspace/apt.postgresql.org /home/buildd/workspace/apt.postgresql.org; do
  test -f $dir/pgapt.conf || continue
  . $dir/pgapt.conf
  break
done

: ${distribution:=sid} ${architecture:=amd64} ${stage:=testing}
set_dist_vars $distribution

LISTSDIR="/home/chroot/$distribution-$architecture/var/lib/apt/lists"
[ -d "$LISTSDIR" ] || error "$LISTSDIR not found"
HOMEDIR="/home/buildd"

# where to find packages.backports_runtime
PGAPTDIR="$HOMEDIR/workspace/apt.postgresql.org/jenkins"
test -d $PGAPTDIR && cd $PGAPTDIR

if [ -d ../repo/dists ]; then
  DISTSDIR="../repo/dists"
elif [ -d "$HOMEDIR/dists" ]; then
  DISTSDIR="$HOMEDIR/dists"
else
  error "No dists directory found."
fi

case $stage in
	production) DIST="$distribution-pgdg" ;;
	testing)    DIST="$distribution-pgdg-testing" ;;
	*) error "Bad stage $stage" ;;
esac

# list of all packages
MAINPKG=$(awk '/^Package:/ { print $2 }' $DISTSDIR/$DIST/main/binary-${architecture}/Packages)

# postgresql-11-pllua needs both beta and backports on jessie, exclude for now
if [ "$distribution" = "jessie" ] && [ "${PG_BETA_VERSION:-}" ]; then
  echo "Skipping test of postgresql-${PG_BETA_VERSION:-}-pllua"
  MAINPKG=$(echo "$MAINPKG" | grep -v "postgresql-${PG_BETA_VERSION:-}-pllua")
fi

# run debcheck
DEBCHECK="dose-debcheck -v -f -e"

# include all Packages files for "distribution" (main, universe, security) and "distribution-updates" (main, universe)
for FILE in $LISTSDIR/*_dists_${distribution}{,-updates}_*_binary-${architecture}_Packages; do
  [ -f "$FILE" ] || continue
  DEBCHECK="$DEBCHECK --bg $FILE"
done

# beta
betapkg=$(fold $(echo "$MAINPKG" | fgrep "${PG_BETA_VERSION:-}"))
if [ "${PG_BETA_VERSION:-}" ] && [ "$betapkg" ]; then
  echo "### Running debcheck: main, packages matching '$PG_BETA_VERSION'"
  ( set -x; $DEBCHECK \
    --bg $DISTSDIR/$DIST/$PG_BETA_VERSION/binary-${architecture}/Packages \
    --fg $DISTSDIR/$DIST/main/binary-${architecture}/Packages \
    --checkonly $betapkg ) || EXIT=$?
  echo

  # exclude packages from further testing
  MAINPKG=$(echo "$MAINPKG" | fgrep -v "$PG_BETA_VERSION")
fi

# devel
develpkg=$(fold $(echo "$MAINPKG" | fgrep "${PG_DEVEL_VERSION:-}"))
if [ "${PG_DEVEL_VERSION:-}" ] && [ "$develpkg" ]; then
  # production doesn't have PG-devel, test modules against -testing
  if [ "$stage" = "production" ]; then
    BGDIST="$DIST-testing"
  else
    BGDIST="$DIST"
  fi

  if [ "$architecture" = "amd64" ]; then
    echo "### Running debcheck: main, packages matching '$PG_DEVEL_VERSION'"
    ( set -x; $DEBCHECK \
      --bg $DISTSDIR/$BGDIST/$PG_DEVEL_VERSION/binary-${architecture}/Packages \
      --fg $DISTSDIR/$DIST/main/binary-${architecture}/Packages \
      --checkonly $develpkg ) || EXIT=$?
  else
    echo "### Skipping '$PG_DEVEL_VERSION' packages on $architecture"
  fi
  echo

  # exclude packages from further testing
  MAINPKG=$(echo "$MAINPKG" | fgrep -v "$PG_DEVEL_VERSION")
fi

# bpo
if [ "$HAS_BACKPORTS" ]; then
    echo "### Running debcheck: main, packages needing backports"
    pkg=$(fold $(echo "$MAINPKG" | grep -e 'resource-agents-paf' -e 'postgresql-.*-pllua'))
    if [ "$pkg" ]; then
      ( set -x; $DEBCHECK \
        --bg $LISTSDIR/../backports/*_dists_${distribution}-backports_main_binary-${architecture}_Packages \
        --fg $DISTSDIR/$DIST/main/binary-${architecture}/Packages \
        --checkonly $pkg ) || EXIT=$?
    fi
    echo

    # exclude packages from further testing
    MAINPKG=$(echo "$MAINPKG" | grep -v -e 'resource-agents-paf' -e 'postgresql-.*-pllua')
fi

# main
echo "### Running debcheck: main, remaining packages"
pkg=$(fold $MAINPKG)
( set -x; $DEBCHECK \
  --fg $DISTSDIR/$DIST/main/binary-${architecture}/Packages \
  --checkonly $pkg ) || EXIT=$?
echo

# other components
for P in $DISTSDIR/$DIST/{?.?,??}/binary-${architecture}/Packages; do
  test -s $P || continue
  PKG="${PKG:-} $P"
done
if [ "${PKG:-}" ]; then
  echo "### Running debcheck: other components"
  ( set -x; $DEBCHECK \
    --bg $DISTSDIR/$DIST/main/binary-${architecture}/Packages \
    --fg $PKG ) || EXIT=$?
fi

exit ${EXIT:-0}
