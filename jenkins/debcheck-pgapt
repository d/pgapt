#!/bin/sh

# expected parameters:
#   distribution (without -pgdg)
#   architecture
#   stage (testing or production)
# expected directories: chroots in /home/chroot
# needs dose3 >= 4

# when set, will check matching packages in main against this extra component
BETA="9.6"

set -eu

error () {
  echo "Error: $@" >&2
  exit 2
}

fold () {
  local r
  for i in "$@"; do
    r="${r:+$r,}$i"
  done
  echo "$r"
}

skip () {
  MAINPKG=$(echo "$MAINPKG" | grep -v "$1")
}

: ${distribution:=sid} ${architecture:=amd64} ${stage:=testing}

LISTSDIR="/home/chroot/$distribution-$architecture/var/lib/apt/lists"
[ -d "$LISTSDIR" ] || error "$LISTSDIR not found"
HOMEDIR="/home/jenkins"

# where to find packages.backports
PGAPTDIR="$HOMEDIR/apt.postgresql.org/jenkins"
test -d $PGAPTDIR && cd $PGAPTDIR

if [ -d ../repo/dists ]; then
  DISTSDIR="../repo/dists"
elif [ -d "$HOMEDIR/dists" ]; then
  DISTSDIR="$HOMEDIR/dists"
else
  error "No dists directory found."
fi

case $stage in
	production) DIST="$distribution-pgdg" ;;
	testing)    DIST="$distribution-pgdg-testing" ;;
	*) error "Bad stage $stage" ;;
esac

# include universe on ubuntu
for FILE in $LISTSDIR/*_dists_${distribution}_universe_binary-${architecture}_Packages ; do
  [ -f "$FILE" ] || continue
  EXTRABG="--bg $FILE"
done

# list of all packages
MAINPKG=$(awk '/^Package:/ { print $2 }' $DISTSDIR/$DIST/main/binary-${architecture}/Packages)

# packages not tested in production
if [ "$stage" = "production" ]; then
  skip cl-pgloader
fi

# packages not tested anywhere (FIXME!)
skip postgresql-9.6-pgrouting; do # depends on postgresql-9.6-postgis-2.2 which doesn't exist yet

# packages not tested on ppc64el
if [ $architecture = ppc64el ]; then
  skip postgresql-8.4-pgtap # PG 8.4 doesn't exist here
  skip postgresql-9.0-pgtap # PG 9.0 doesn't exist here
fi

# run debcheck
DEBCHECK="dose-debcheck -v -f -e ${EXTRABG:-} --bg $LISTSDIR/*_dists_${distribution}_main_binary-${architecture}_Packages"

# bpo
case $distribution in
  squeeze|wheezy|jessie)
    echo "### Running debcheck: main, packages needing backports"
    [ -f packages.backports ] || error "packages.backports not found"
    pkg=$(fold $(cat packages.backports))
    ( set -x; $DEBCHECK \
      --bg $LISTSDIR/../backports/*_dists_${distribution}-backports_main_binary-${architecture}_Packages \
      --fg $DISTSDIR/$DIST/main/binary-${architecture}/Packages \
      --checkonly $pkg ) || EXIT=$?
    echo

    # exclude packages from further testing
    MAINPKG=$(echo "$MAINPKG" | fgrep -v -f packages.backports)
  ;;
esac

# beta
if [ "${BETA:-}" ]; then
  echo "### Running debcheck: main, packages matching '$BETA'"
  pkg=$(fold $(echo "$MAINPKG" | fgrep "$BETA"))
  ( set -x; $DEBCHECK \
    --bg $DISTSDIR/$DIST/$BETA/binary-${architecture}/Packages \
    --fg $DISTSDIR/$DIST/main/binary-${architecture}/Packages \
    --checkonly $pkg ) || EXIT=$?
  echo

  # exclude packages from further testing
  MAINPKG=$(echo "$MAINPKG" | fgrep -v "$BETA")
fi

# main
echo "### Running debcheck: main, remaining packages"
pkg=$(fold $MAINPKG)
( set -x; $DEBCHECK \
  --fg $DISTSDIR/$DIST/main/binary-${architecture}/Packages \
  --checkonly $pkg ) || EXIT=$?
echo

# other components
for P in $DISTSDIR/$DIST/?.?/binary-${architecture}/Packages; do
  test -s $P || continue
  PKG="${PKG:-} $P"
done
if [ "${PKG:-}" ]; then
  echo "### Running debcheck: other components"
  ( set -x; $DEBCHECK \
    --bg $DISTSDIR/$DIST/main/binary-${architecture}/Packages \
    --fg $PKG ) || EXIT=$?
fi

exit ${EXIT:-0}
