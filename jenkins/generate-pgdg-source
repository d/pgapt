#!/bin/sh

# The MIT License
#
# Copyright (c) 2011,2012 by Michael Prokop <mika@debian.org>
# Copyright (c) 2012-2014 by Christoph Berg <myon@debian.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

echo "BUILD_NUMBER=${BUILD_NUMBER:-}"
echo "JOB_NAME=${JOB_NAME:-}"
echo "GIT_COMMIT=${GIT_COMMIT:-}"
echo "BZR_REVISION=${BZR_REVISION:-}"
echo "SVN_REVISION=${SVN_REVISION:-}"
echo "distribution=${distribution:-}"
echo "revision=${revision:-}"

set -x
set -e
set -u

# which PostgreSQL major version to pull libpq et al. from (should be last stable release)
PGLIBVER="9.3"
# which libpq version to use in sid (latest beta)
PGLIBVER_SID="9.3"
# PostgreSQL devel version for building snapshots
PGDEVVER="9.5"

[ -n "${DEBEMAIL:-}" ] || export DEBEMAIL="apt.postgresql.org autobuilder <myon@debian.org>"

export PG_SUPPORTED_VERSIONS="pgdg"

if [ -z "${BUILD_NUMBER:-}" ] ; then
  echo "No BUILD_NUMBER defined, please run it in jenkins." >&2
  exit 1
fi

PACKAGE=${JOB_NAME%-source*}
if [ "$PACKAGE" = "$JOB_NAME" ] ; then
  echo "JOB_NAME $JOB_NAME does not end with -source" >2
  exit 1
fi

REVERTS="debian/changelog debian/control debian/rules"

if [ "${GIT_COMMIT:-}" ]; then
  VCS=git
  VCS_REVISION=$GIT_COMMIT
  VCS_REVERT=checkout
  # building in 'source'
  cd source
  RESULT=../result
elif [ "${BZR_REVISION:-}" ] ; then
  VCS=bzr
  VCS_REVISION=$BZR_REVISION
  VCS_REVERT=revert
  # building in '.'
  RESULT=result
elif [ "${SVN_REVISION:-}" ] ; then
  VCS=svn
  VCS_REVISION=$SVN_REVISION
  VCS_REVERT=revert
  # building in 'source'
  cd source
  RESULT=../result
else
  echo "Using apt-get source"
  rm -rf $PACKAGE* source
  apt-get source -d $PACKAGE
  dpkg-source -x $PACKAGE*.dsc
  mv $PACKAGE-*/ source
  VCS=apt-get
  VCS_REVISION="sid"
  VCS_REVERT=moo # apt-get noop :)
  cd source
  RESULT=../result
fi

# remove artifacts from last build
rm -rf $RESULT ../*.dsc ../*.debian.tar.* ../*.diff.gz ../*.changes

# clean up behind a possibly broken last job
cleanup () {
  $VCS $VCS_REVERT $REVERTS || :
  case $JOB_NAME in
    *-git-head*) # PostgreSQL devel merged with Debian packaging in bzr
      UNRELEASED=1
      git reset --hard
      rm -rf .pc debian/patches/git-head
      ;;
  esac
}
trap "cleanup" 0 2 3 15
cleanup

# get newest version number from changelog
PREVIOUS_VERSION=$(dpkg-parsechangelog --count 1 | awk '/^Version: / {print $2}')
BASE_VERSION=$(echo $PREVIOUS_VERSION | sed -e 's/[~.]\(pgdg\|pgapt\).*//')

case ${distribution:-} in
  # Debian
  sid)     PGLIBVER="$PGLIBVER_SID" # use latest beta on sid
           PGDG_DISTRIBUTION="pgdg"   ;;
  jessie)  PGDG_DISTRIBUTION="pgdg80" ;;
  wheezy)  PGDG_DISTRIBUTION="pgdg70" ;;
  squeeze) PGDG_DISTRIBUTION="pgdg60" ;;
  lenny)   PGDG_DISTRIBUTION="pgdg50" ;;
  etch)    PGDG_DISTRIBUTION="pgdg40" ;;
  # Ubuntu
  trusty)  PGDG_DISTRIBUTION="pgdg14.04" ;;
  saucy)   PGDG_DISTRIBUTION="pgdg13.10" ;;
  precise) PGDG_DISTRIBUTION="pgdg12.4" ;;
  lucid)   PGDG_DISTRIBUTION="pgdg10.4" ;;
  *) echo "Unknown distribution ${distribution:-}" >&2 ; exit 1 ;;
esac

## PostgreSQL devel version: This assumes a PostgreSQL git checkout provided by
## Jenkins and puts a bzr checkout for the packaging in the same directory
#if [ "$PACKAGE" = "postgresql-$PGDEVVER" ]; then
#  ORIG_VERSION="$PGDEVVER~$(date -u +%Y%m%d.%H%M)"
#  ORIGTAR="../${PACKAGE}_${ORIG_VERSION}.orig.tar.gz"
#  BASE_VERSION="$ORIG_VERSION-1"
#  VCS="bzr"
#  VCS_REVERT="revert"
#  if ! [ -f "$ORIGTAR" ]; then
#    rm -f ../${PACKAGE}_*orig*
#    git archive -o $ORIGTAR HEAD
#  fi
#  if [ -d .bzr ]; then
#    bzr pull
#  else
#    bzr branch "https://alioth.debian.org/scm/loggerhead/pkg-postgresql/postgresql-$PGDEVVER/trunk/"
#    mv trunk/debian trunk/.bzr* .
#    rmdir trunk
#  fi
#fi

case $JOB_NAME in
  *-git-head*) # PostgreSQL devel merged with Debian packaging in bzr
    EDITOR=touch dpkg-source --commit . git-head
    ;;
esac

# for postgresql server packages, move all lib packages to a separate
# component, unless we are building postgresql-$PGLIBVER
case $PACKAGE in
  postgresql-$PGLIBVER)
    # remove x.y/ prefix (if any)
    echo "Lib packages from $PACKAGE will go to the main component"
    perl -i -000 -pe "s/^Section: (?:.+\/)?(.*)/Section: \$1/m if (/^Package: lib/m)" \
      debian/control
    # display result
    perl -000 -ne 'if (/^(Package: lib.*)/m) { print "$1 "; print "$1\n" if /^(Section: .*)/m; }' \
      debian/control
    ;;
  postgresql-?.?|postgresql-??.?)
    # add x.y/ prefix
    PGVERSION=$(echo $PACKAGE | sed -e 's/^postgresql-//')
    echo "Setting lib packages component to $PGVERSION"
    perl -i -000 -pe "s/^Section: (?:.+\/)?(.*)/Section: $PGVERSION\/\$1/m if (/^Package: lib/m)" \
      debian/control
    # display result
    perl -000 -ne 'if (/^(Package: lib.*)/m) { print "$1 "; print "$1\n" if /^(Section: .*)/m; }' \
      debian/control
    ;;

  autopkgtest|libdbd-pg-perl)
    DOT='~' ;;

  check-postgres) # add B-D for all PostgreSQL versions, not just "postgresql"
    for version in $(/usr/share/postgresql-common/supported-versions); do
      sed -i -e "s/^Build-Depends: /Build-Depends: postgresql-$version, /" debian/control
    done
    ;;

  gdal)
    DOT='~'
    case ${distribution:-} in
      precise) # precise's freexl is too old
        sed -i -e "s/, libfreexl-dev[^,]*,/,/" debian/control
        sed -i -e "s/--with-freexl=yes/--with-freexl=no/" debian/rules
      ;;
    esac
    ;;

  geos)
    DOT='~'
    case ${distribution:-} in
      squeeze) # squeeze's ruby1.8 package doesn't provide /usr/bin/ruby
        sed -i -e "s/^Build-Depends: /Build-Depends: ruby, /" debian/control debian/control.in
      ;;
    esac
    ;;

  pgagent) # depend on all PostgreSQL versions, not just "postgresql"
    for version in $(/usr/share/postgresql-common/supported-versions); do
      sed -i -e "s/^Depends: /Depends: postgresql-$version, /" debian/tests/control
    done
    ;;

  pgextwlist) # depend on all contrib packages
    for version in $(/usr/share/postgresql-common/supported-versions); do
      sed -i -e "s/^Depends: /Depends: postgresql-contrib-$version, /" debian/tests/control
    done
    ;;

  psqlodbc)
    case ${distribution:-} in
      wheezy|precise|saucy|trusty) # odbc-postgresql conflicts with libiodbc2, skip iodbc test here
        sed -i -e 's/, iodbc//' debian/tests/control
        ;;
    esac
    ;;
esac

# lenny/lucid do not support xz compression
case ${distribution:-} in
  lenny|etch|lucid)
    case $PACKAGE in
      postgresql-?.?|postgresql-??.?) # dh_builddeb ... -- -Zxz
        sed -i -e 's/ -Zxz//' debian/rules ;;
    esac ;;
esac

# for binnmu-style rebuilds, add a "revision" parameter to the source job
if [ "${revision:-}" ] ; then
  PGDG_REVISION="+${revision}"
else
  case $PREVIOUS_VERSION in
    *pgdg*|*pgapt*) PGDG_REVISION=$(echo $PREVIOUS_VERSION | sed -e 's/.*+/+/') ;;
    *) PGDG_REVISION="+1" ;;
  esac
fi

# set $UNRELEASED to force using a ~version
CL_DISTRIBUTION=$(dpkg-parsechangelog --count 1 | awk '/^Distribution/ {print $2}')
if [ "${UNRELEASED:-}" ] || echo "$CL_DISTRIBUTION" | grep -q "UNRELEASED" ; then
  SHORT_REVISION=$(echo $VCS_REVISION | cut -c 1-7)
  SUFFIX="~${BUILD_NUMBER}.${VCS}${SHORT_REVISION}"
else
  SUFFIX=""
fi

# $DOT defaults to '.', but can be set to '~'

VERSION_STRING="$BASE_VERSION$SUFFIX${DOT:-.}$PGDG_DISTRIBUTION$PGDG_REVISION"
dch --force-distribution --distribution="$distribution-pgdg" \
  --release-heuristic log -b --newversion=$VERSION_STRING -- \
  "Rebuild for $distribution-pgdg (${BUILD_TAG:-}, $VCS revision $VCS_REVISION)"

origtargz --tar-only --path=$HOME/tarballs -d
if ! [ -f debian/control ] ; then
  make -f debian/rules debian/control
fi
dpkg-buildpackage -uc -us -nc -d -sa -S -i -I

mkdir $RESULT
dcmd cp -alv ../${PACKAGE}_*.changes $RESULT

# vim:foldmethod=marker ts=2 ft=sh ai expandtab sw=2
