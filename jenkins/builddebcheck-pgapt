#!/bin/sh

# expected parameters:
#   distribution (without -pgdg)
#   architecture
#   stage (testing or production)
# expected directories: chroots in /home/chroot
# needs dose3 >= 4

set -eu

error () {
  echo "Error: $@" >&2
  exit 2
}

: ${distribution:=sid} ${architecture:=amd64} ${stage:=testing}

LISTSDIR="/home/chroot/$distribution-$architecture/var/lib/apt/lists"
[ -d "$LISTSDIR" ] || error "$LISTSDIR not found"
BPODIR="/home/chroot/$distribution-$architecture/var/lib/apt/backports"
HOMEDIR="/home/jenkins"

# where to find packages.backports
PGAPTDIR="$HOMEDIR/apt.postgresql.org/jenkins"
test -d $PGAPTDIR && cd $PGAPTDIR

if [ -d ../repo/dists ]; then
  DISTSDIR="../repo/dists"
elif [ -d "$HOMEDIR/dists" ]; then
  DISTSDIR="$HOMEDIR/dists"
else
  error "No dists directory found."
fi

# main package list
PKG="$LISTSDIR/*_dists_${distribution}_main_binary-${architecture}_Packages"

trap 'rm -f ${MAINSRC:-} ${BPOSRC:-}' 0 2 3 15

# include universe on ubuntu
for FILE in $LISTSDIR/*_dists_${distribution}_universe_binary-${architecture}_Packages ; do
  [ -f "$FILE" ] || continue
  PKG="$PKG $FILE"
done

# packages not depending on backports
MAINSRC=$(mktemp main_source_Sources.XXXXXX)
zcat $DISTSDIR/$distribution-pgdg-testing/main/source/Sources.gz > $MAINSRC

case $distribution in
  squeeze|wheezy|jessie)
    [ -f packages.backports ] || error "packages.backports not found"
    for pkg in $(cat packages.backports); do
      grep-dctrl --not -S $pkg $MAINSRC > $MAINSRC.tmp
      mv $MAINSRC.tmp $MAINSRC
    done

    # packages depending on backports
    BPOSRC=$(mktemp bpo_source_Sources.XXXXXX)
    for pkg in $(cat packages.backports); do
      zcat $DISTSDIR/$distribution-pgdg-testing/main/source/Sources.gz | \
        grep-dctrl -S $pkg >> $BPOSRC || :
    done

    # include backports on debian
    [ -d "$BPODIR" ] || error "$BPODIR not found"
    for FILE in $BPODIR/*_dists_${distribution}-backports_main_binary-${architecture}_Packages ; do
      [ -f "$FILE" ] || continue
      BPO="$FILE"
    done
    ;;
esac

# include pgdg dists
case $stage in
	production)
		DIST="$distribution-pgdg"
		PKG="$PKG $DISTSDIR/$DIST/main/binary-${architecture}/Packages"
		# -pgdg packages may use -pgdg -testing for building
		PKG="$PKG $DISTSDIR/$DIST-testing/main/binary-${architecture}/Packages"
		;;
	testing)
		DIST="$distribution-pgdg-testing"
		PKG="$PKG $DISTSDIR/$DIST/main/binary-${architecture}/Packages"
		;;
	*) error "Bad stage $stage" ;;
esac

# run builddebcheck
BUILDDEBCHECK="dose-builddebcheck -v -f -e --deb-native-arch=$architecture"

echo "### Running builddebcheck: main, packages not needing backports"
( set -x; $BUILDDEBCHECK $PKG $MAINSRC ) || EXIT=1
echo

if test -s "${BPO:-}"; then
  echo "### Running builddebcheck: main, packages needing backports"
  grep '^Package:' $BPOSRC
  ( set -x; $BUILDDEBCHECK $PKG $BPO $BPOSRC ) || EXIT=1
  echo
fi

for component in $DISTSDIR/$DIST/?.?/source/Sources.gz; do
  [ $(zcat $component | wc -c) = 0 ] && continue # skip empty file
  echo "### Running builddebcheck: $component"
  zcat $component | grep '^Package:'
  ( set -x; $BUILDDEBCHECK $PKG $component ) || EXIT=1
  echo
done

exit ${EXIT:-0}
