#!/bin/bash

# expected parameters:
#   distribution (without -pgdg, default "sid")
#   architecture (default "amd64")
#   stage (testing or production, default "testing")
# expected directories: chroots in /home/chroot
# needs dose3 >= 4

set -eu

error () {
  echo "Error: $@" >&2
  exit 2
}

# read pgapt config
for dir in . .. /home/jenkins/jenkins/workspace/apt.postgresql.org /home/buildd/workspace/apt.postgresql.org; do
  test -f $dir/pgapt.conf || continue
  . $dir/pgapt.conf
  break
done

: ${distribution:=sid} ${architecture:=amd64} ${stage:=testing}
set_dist_vars $distribution

LISTSDIR="/home/chroot/$distribution-$architecture/var/lib/apt/lists"
[ -d "$LISTSDIR" ] || error "$LISTSDIR not found"
BPODIR="/home/chroot/$distribution-$architecture/var/lib/apt/backports"
HOMEDIR="/home/buildd"

# where to find packages.backports
PGAPTDIR="$HOMEDIR/workspace/apt.postgresql.org/jenkins"
test -d $PGAPTDIR && cd $PGAPTDIR

if [ -d ../repo/dists ]; then
  DISTSDIR="../repo/dists"
elif [ -d "$HOMEDIR/dists" ]; then
  DISTSDIR="$HOMEDIR/dists"
else
  error "No dists directory found."
fi

remove_packages ()
{
  FILE="$1"
  shift
  for pkg in "$@"; do
    grep-dctrl --not -S $pkg $FILE > $FILE.tmp
    mv $FILE.tmp $FILE
  done
}

trap 'rm -f ${MAINSRC:-} ${BPOSRC:-}' 0 2 3 15

# include all Packages files for "distribution" (main, universe, security) and "distribution-updates" (main, universe)
for FILE in $LISTSDIR/*_dists_${distribution}{,-updates}_*_binary-${architecture}_Packages; do
  [ -f "$FILE" ] || continue
  PKG="${PKG:-} $FILE"
done

# include pgdg dists
case $stage in
  production) DIST="$distribution-pgdg" ;;
  testing)    DIST="$distribution-pgdg-testing" ;;
  *) error "Bad stage $stage" ;;
esac
PKG="$PKG $DISTSDIR/$DIST/main/binary-${architecture}/Packages"

# packages not depending on backports
MAINSRC=$(mktemp ${DIST}_main_source_Sources.XXXXXX)
zcat $DISTSDIR/$DIST/main/source/Sources.gz > $MAINSRC

if [ "$HAS_BACKPORTS" ]; then
    [ -f packages.backports ] || error "packages.backports not found"
    remove_packages $MAINSRC $(cat packages.backports*)

    # packages depending on backports
    BPOSRC=$(mktemp ${DIST}_bpo_source_Sources.XXXXXX)
    for pkg in $(cat packages.backports*); do
      grep-dctrl -S $pkg < $MAINSRC >> $BPOSRC || :
    done

    # include backports packages file
    [ -d "$BPODIR" ] || error "$BPODIR not found"
    for FILE in $BPODIR/*_dists_${distribution}-backports_main_binary-${architecture}_Packages ; do
      [ -f "$FILE" ] || error "$FILE not found"
      BPO="$FILE"
    done
fi

# packages not tested on ppc64el
if [ $architecture = ppc64el ]; then
  remove_packages $MAINSRC buildapp cffi cl-unicode pgloader sbcl plv8
fi

# packages not tested on certain dists
# python-werkzeug needs DH 12 and python3-sphinx-issues
case $distribution in
  buster|stretch|eoan|disco|bionic|xenial)
    remove_packages $MAINSRC python-werkzeug ;;
esac

# run builddebcheck
BUILDDEBCHECK="dose-builddebcheck -v -f -e --deb-native-arch=$architecture"

echo "### Running builddebcheck: main, packages not needing backports"
( set -x; $BUILDDEBCHECK $PKG $MAINSRC ) || EXIT=1
echo

if test -s "${BPO:-}"; then
  echo "### Running builddebcheck: main, packages needing backports"
  grep '^Package:' $BPOSRC || :
  ( set -x; $BUILDDEBCHECK $PKG $BPO $BPOSRC ) || EXIT=1
  echo
fi

for component in $DISTSDIR/$DIST/{?.?,??}/source/Sources.gz; do
  [ $(zcat $component | wc -c) = 0 ] && continue # skip empty file
  echo "### Running builddebcheck: $component"
  zcat $component | grep '^Package:'
  ( set -x; $BUILDDEBCHECK $PKG $component ) || EXIT=1
  echo
done

exit ${EXIT:-0}
